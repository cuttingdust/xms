syntax="proto3" ;	/// 语法版本
package xmsg;		/// 包名(命名空间)
import "XMsgType.proto";

/// 消息头
message XMsgHead
{
	int32		msgSize		= 1;	///< 消息内容大小， 不包含头
	MsgType     msgType		= 2;	///< 消息类型
	string		token		= 3;	///< 令牌 如果是登录消息则为空
	string		serverName	= 4;	///< 微服务的名称 用于路由
	int64		msgID		= 5;	
	string      username	= 6;	///< 用户名称
	string 		rolename	= 7;	///< 用户角色
	bytes		md5			= 8;	///< 消息内容md5校验
	int64		offset		= 9;	///< 数据偏移
}

/// 心跳
message XMsgHeart
{
	int64 count = 1;
}

enum XLogLevel
{
	XLOG_DEBUG = 0;
	XLOG_INFO  = 1;
	XLOG_ERROR = 2;
	XLOG_FATAL = 3;
}

message XAddLogReq
{
	string    service_ip   = 1;
	int32     service_port = 2;
	string    service_name = 3;
	bytes     log_txt      = 4;
	int32     log_time     = 5;
	XLogLevel log_level    = 6;
	string    filename     = 7;
	int32     line         = 8;
}


/// 用户注册 微服务架构的用户系统，只为了做单点登录，不涉及权限，权限有具体的业务处理
/// 系统只有一个root用户
/// MSG_ADD_USER
message XAddUserReq
{
	string username = 1;	///< 用户名
	string password = 2;	///< md5后的密码
	string rolename = 3;	///< 角色名称，为了后期拓展角色权限
}

message XChangePasswordReq
{
	string username 	= 1;    ///<<< 用户名
	string password 	= 2;	///<<< md5后的密码
	string new_password = 3;	///<<< 修改的密码
}


/// 用户登陆请求 MSG_LOGIN_REQ
message XLoginReq 
{
	string username = 1;	///< 用户名
	string password = 2;	///< md5后的密码
}

message XLoginRes
{
	enum XLoginResType
	{
		XRT_NONE         = 0;   ///<<< 未处理	
		XRT_LOGGING      = 1;	///<<< 登录中
		XRT_OK			 = 2;	///<<< 登陆成功
		XRT_ERR			 = 3;	///<<< 用户名密码错误
		XRT_NO_USER		 = 4;	///<<< 用户不存在
		XRT_SERVER_ERROR = 5;   ///<<< 服务端连接错误
	}
	XLoginResType	resType			= 1;	///< 登陆结果类型
	string			token			= 2;	///< 登陆成功后的令牌, 失败为空
	int32			expired_time	= 3;	///< token 超时时间戳
	string			rolename 		= 4;
	string			username		= 5;
}


/// 目录请求
message XDirReq
{
	string path = 1;	/// 目录路径
}

/// 目录响应
message XDirRes
{
	enum XDirType
	{
		XDT_OK    = 0;	///<<< 目录获取成功
		XDT_ERROR = 1;	///<<< 目录获取错误
		XDT_NODIR = 2;	///<<< 目录不存在
	}

	message XDir
	{
		string filename = 1;
		int32  filesize = 2;
	}

	XDirType resType   = 1;	///< 目录结果类型
	repeated XDir dirs = 2;	///< 目录文件列表
}

enum XServiceType
{
	XT_ONE = 0;	///<<< 只取一类服务	
	XT_ALL = 1;	///<<< 取全部服务
}

message XService
{
	string	name	= 1;
	string	ip		= 2;
	int32	port	= 3;
	bool	is_find = 4; ///< 是否可以被外网的发现，默认不可以
}

message XServiceList
{
	repeated XService	services	= 1;
	string				name		= 2;
}

message XServiceMap
{
	map<string,XServiceList> service_map = 1;
	XMessageRes				 res		= 2;
	XServiceType			 type		= 3;	///< 服务类型，XT_ONE 只取一类服务，XT_ALL 取全部服务
}

/// MSG_REGISTER_REQ = 5;	//注册服务请求
message XRegisterReq
{
	string	name	= 1; ///< 服务名称
	int32	port	= 2; ///< 服务端口
	string	ip		= 3; ///< 服务ip
	bool	is_find = 4; ///< 是否可以被外网发现
}

/// 通用响应 MT_REGISTER_RES 注册服务响应
message XMessageRes
{
	enum XReturn
	{
		XR_OK	 = 0;		
		XR_ERROR = 1;
	}
	XReturn return = 1;
	bytes  msg	   = 2;
}

/// MT_GET_SERVICE_REQ = 7;	/// 发现服务请求
message XGetServiceReq
{
	string			name = 1; ///< 服务名称，如果未空，则获取所有服务
	XServiceType	type = 2; ///< 服务类型，XT_ONE 只取一类服务，XT_ALL 取全部服务
}

/// 存储配置内容
message XConfig
{
	string service_name = 1;
	int32  service_port = 2;
	string service_ip	= 3;
	bytes  private_pb	= 4;
	bytes  proto		= 5;
}

/// 下载配置请求，响应是 XConfig
message XLoadConfigReq
{
	int32	service_port = 1;
	string	service_ip	 = 2;
}

message XDirConfig
{
	string root = 1;
}

/// 请求获取配置列表
/// MT_LOAD_ALL_CONFIG_REQ = 13;	//XLoadAllConfigReq
message XLoadAllConfigReq
{
	int32 page		 = 1;	///< 分页的第几页 从1开始
	int32 page_count = 2;	///< 每页显示的记录数量
}

/// MT_LOAD_ALL_CONFIG_RES = 14;	//XConfigList

/// 响应配置列表
/// 只包含微服务名称，IP，port
message XConfigList
{
	repeated XConfig config = 1;
}

/// 网关配置
message XGatewayConfig
{
	bool   is_ssl 		= 1;	///< 是否开启SSL通信
	string crt_path		= 2;	///< 证书路径
	string key_path 	= 3;	///< 私钥路径
	string ca_path  	= 4;	///< 证书签名验证路径
	// int32  server_port	= 5;	///< 服务器端口号 非SSL 默认 API_GATEWAY_PORT， 默认SSL API_GATEWAY_SSL_PORT
}

/// 鉴权微服务配置
message XAuthConfig
{
	int32  token_timeout_sec = 1;	///< 登录token
	string db_ip             = 2;	///< 数据库ip 默认 127.0.0.1
	string dp_user           = 3;	///< 数据库用户 默认 root
	string dp_pass           = 4;	///< 数据库密码  后面考虑要加密存储 默认为空
	string dp_type           = 5;	///< 数据库类型，暂时只支持mysql，后面考虑加redis
	string dp_name           = 6;	///< 数据库的名称 	默认 xms
}